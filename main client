#include <iostream>
#include <string>
#include <vector>
#include <list>
#include <map>
#include "Knn.h"
#include <cstring>
#include "VectorDistance.h"
#include "StreamFiles.h"
#include <sys/socket.h>
#include <unistd.h>
#include <netinet/in.h>
#include <arpa/inet.h>
using namespace std;

int   main(int length,char** args){

 const int port= atoi(args[2]);
    if (port < 1024 || port > 65535){
        cout<<"invalid port"<<endl;
    }
    const char* ip =(args[3]);
    char num3[3];
    char num2[2];
    char num1[1];
    int j = 0;
    

    if (strlen(ip) > 15){
        cout<<"invalid ip1"<<endl;
        return -1;
    }
    if (!isdigit(ip[0])){
        cout<<"invalid input"<<endl;
        return -1;
    }

    for(int i =0 ; i < strlen(ip); i++) {
        int k = i + 1;
        int m = k + 1;

        if (isdigit(ip[i]) && isdigit(ip[k]) && isdigit(ip[m])) {
            num3[j] = ip[i];
            j = j++;
            num3[j] = ip[k];
            j = j++;
            num3[j] = ip[m];
            int x = atoi(num3);
            i = m +1;
            if (x > 255) {
                cout << "invalid input" << endl;
                return -1;
            }
            j = 0;
        } else if (isdigit(ip[i]) && isdigit(ip[k]) && ip[m] != 46 ) {

                cout << "invalid input1"<<endl;
                return -1;
                j=0;
        }else if(ip[i]  == 46 && ip[k] == 46 ){
            cout<<"invalid input"<<endl;
            return -1;
        }else if (isdigit(ip[i]) && ip[k]!=46 && !isdigit(ip[k]) && i!=strlen(ip)-1 ){
            cout << "invalid input" << endl;
            return -1;
        }


    }
 int sock =  socket(AF_INET, SOCK_DGRAM,0);
 if(sock < 0){
    cout<< "can't create socket"<<endl ;
 }
  struct sockaddr_in sin; 
  sin.sin_family = AF_INET;
  sin.sin_addr.s_addr = inet_addr(ip);
  sin.sin_port = htons(port);
  int connect =  bind(sock,(struct sockaddr*)&sin, sizeof(sin));
  if (connect < 0){
    cout<<"can't bind the server with the client"<<endl;
      return -1;
}

 string vectorString;
 string resave;
  while (getline(cin, vectorString)) {
     resave = vectorString;
     for (char a: resave){
            if( a = 46 && !isdigit(a++) && !isdigit(a--)){
                cout<< "invalid output"<<endl;
                
            }else if(isspace(a) && isspace(a++)){
                 cout<< "invalid output"<<endl;
                 
            } else if (!isspace(a) || a != 46 && !isdigit(a)){
               cout<< "invalid output"<<endl;
                 
            }
            

            
          }
     }
     char sendSer[sizeof(vectorString)-1] ;
        int p =0;
        for (char a : vectorString){
            sendSer[p] = a;
            p++;
        }
    int is_sent = send(sock , sendSer , sizeof(vectorString)-1 , 0 );
    if (is_sent == -1) {
        std::cout<<"Error sending message"<<std::endl;
    } else {
        std::cout<<"vector  message sent to server" <<std::endl;
    }
    

    char buffer[1024] = {0};
    int valread = read(sock , buffer, 1024);
   // std::cout<<buffer<<std::endl;

    close(sock);


    return 0;
    }
