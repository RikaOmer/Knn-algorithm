#include <iostream>
#include <string>
#include <vector>
#include <list>
#include <map>
#include "Knn.h"
#include "VectorDistance.h"
#include "StreamFiles.h"
#include <sys/socket.h>
#include <string>
#include <iostream>
#include <unistd.h>
#include <netinet/in.h>
#include <arpa/inet.h>
using namespace std;

int   main(int length,char** args){

 const int port= atoi(args[2]);
 const char* ip =(args[1]);
 char num[3];
 int j = 0;
 int newN ;
 if (sizeof(ip) > 15){
    cout<<"invalid ip"<<endl;
    return -1; 
 }
  if (!isdigit(ip[0])){
    cout<<"invalid ip"<<endl;
  }
 for(int i =0 ; i < sizeof(ip); i++){
    if (isdigit(ip[i])){
        num[j] = ip[i];
        j++;
    }
    else if(isspace(ip[i])){
         cout<<"invalid ip"<<endl;
    }
    else if ( ip[i] == 46 && j > 3){
        cout<<"invalid ip"<<endl;
    }
    else if (j == 3 && ip[i+1]==46){
        newN = atoi(num);
        if(newN>255 || newN<1){
        cout<<"invalid ip"<<endl;
        }else j=0;
    }
    if(ip[i]== 46 && j<3){
        j=0;
    }  
 }
 int sock =  socket(AF_INET, SOCK_DGRAM,0);
 if(sock < 0){
    cout<< "can't create socket"<<endl ;
 }
  struct sockaddr_in sin; 
  sin.sin_family = AF_INET;
  sin.sin_addr.s_addr = inet_addr(ip);
  sin.sin_port = htons(port);
  int connect =  bind(sock,(struct sockaddr*)&sin, sizeof(sin));
  if (connect < 0){
    cout<<"can't bind the server with the client"<<endl;
      return -1;
}
 
    int k =atoi(args[1]);
    string fileName=args[2];
    string distanceFunc = args[3];
    map<string, list<vector<double>>> dataSet;
    StreamFiles streamer;
    VectorDistance vectorCalculator;
    dataSet = streamer.dataMake(fileName);
     string vectorString;
    while (getline(cin, vectorString)) {
    while(k>0){   
    if (vectorCalculator.validCheck(vectorString) == 1)
    {
        cout << "invalid input"<<endl;
    } else {
         vector<double> vectorDouble = vectorCalculator.createVector(vectorString);
         if (vectorDouble.size() != dataSet.begin()->second.begin()->size())
         {
             cout << "wrong length of vector"<<endl;
             
         } else {
             
                 dataSet =vectorCalculator.distanceCalc(dataSet,vectorDouble, distanceFunc);
                  Knn knn;
                string name = knn.KnnAlgo(dataSet,k);
                std::fixed(std::cout);
                std::cout.precision(16);
                cout << name << endl;
                }
            }
           
    }
}
    return 0;
    }
